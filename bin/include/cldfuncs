#!/bin/bash
if [ "$(stat -c "%a" /var/cld)" != "700" ] 
then
chattr -i /var/cld
chmod 700 /var/cld
chattr +i /var/cld
fi

if ! [[ "$(lsattr -d /var/cld)" =~ ^[A-Za-z-]+i[A-Za-z-]+\ +/var/cld$ ]] 
then
chattr +i /var/cld
fi

[ "$SUDO_USER" ] || SUDO_USER=admin
if [ "$FROM" == "API" ] 
then 
  F=
  B=
elif [ "$FROM" == "BOT" ]
then
  F=
  B=
  # F='`'
  # B='*'
fi

VM_LIST() {
(
for GROUP in $(ls /var/cld/access/groups/)
do
grep -qs "1" /var/cld/access/groups/${GROUP}/type \
&& cat /var/cld/access/groups/${GROUP}/clouds \
|| cut -d _ -f -4 /var/cld/access/groups/${GROUP}/clouds
done
) | grep -v "^$"
}

CLD_LOGS() {
CLD_LOG_DATE=$(date +%F)
if ! [ -d "/var/cld/log/session/${SUDO_USER}/${CLD_LOG_DATE}" ]
then
mkdir -p /var/cld/log/session/${SUDO_USER}/${CLD_LOG_DATE}/ &>/dev/null
fi
CLD_LOG=/var/cld/log/session/${SUDO_USER}/${CLD_LOG_DATE}/${VM}_$(date +"%H-%M")
SFTP_LOG=/var/cld/log/session/${SUDO_USER}/${CLD_LOG_DATE}/${VM}_sftp_$(date +"%H-%M").gz
}

CLD_DEPLOY_LOGS() {
mkdir -p /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/deploy_log &>/dev/null
CLD_ACTION_LOG=/var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/deploy_log/${VM}
[ "$TEST" == "1" ] && mkdir -p /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_log &>/dev/null
[ "$TEST" == "1" ] && CLD_ACTION_TEST_LOG=/var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_log/${VM}
[ "$BACKUP" == "1" ] && mkdir -p /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_log &>/dev/null
[ "$BACKUP" == "1" ] && CLD_ACTION_BACKUP_LOG=/var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_log/${VM}
}

EXTERNAL_VARS() {
VMN=`echo $VM | cut -d "_" -f 1`
SRV=`echo $VM | cut -d "_" -f 2`
PRT=`echo $VM | cut -d "_" -f 3`
USR=`echo $VM | cut -d "_" -f 4`
PWD=`grep $VM /var/cld/access/groups/${GROUP}/clouds | cut -d _ -f 5-`
}

EXTERNAL_MOUNT() {
LOCALMOUNTPATH="/home/${SUDO_USER}/mnt/${VM}"
if [ ! -d "$DIR" ]; then mkdir -p $LOCALMOUNTPATH ;fi
fusermount -uzq $LOCALMOUNTPATH >> /dev/null
mkdir -p $LOCALMOUNTPATH 2>&1 >/dev/null
echo $PWD | grep -q "^$" || PWDOPT="-o password_stdin"
echo $USR | grep -q root || SFTP_PATH=$(sshpass -p "$PWD" ssh -q -p ${PRT} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o "RequestTTY force" $USR@$SRV "grep sftp /etc/ssh/sshd_config" | awk '{print $3}' | tr -d '\r\n')
echo $USR | grep -q root || SUDO_PATH=$(sshpass -p "$PWD" ssh -q -p ${PRT} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o "RequestTTY force" $USR@$SRV "which sudo" | tr -d '\r\n')
mkdir -p $LOCALMOUNTPATH 2>&1 >/dev/null
{
echo $USR | grep -q root || sshfs -f -d -p $PRT ${PWDOPT} -o sftp_server="${SUDO_PATH} ${SFTP_PATH}" -o allow_other,UserKnownHostsFile=/dev/null,StrictHostKeyChecking=no,Ciphers=chacha20-poly1305@openssh.com $USR@$SRV:/ $LOCALMOUNTPATH  &>/dev/stdout <<< "$PWD" | pigz -9 -f > ${SFTP_LOG} & disown
echo $USR | grep -q root && sshfs -f -d -p $PRT ${PWDOPT} -o allow_other,UserKnownHostsFile=/dev/null,StrictHostKeyChecking=no,Ciphers=chacha20-poly1305@openssh.com $USR@$SRV:/ $LOCALMOUNTPATH &>/dev/stdout <<< "$PWD" | pigz -9 -f > ${SFTP_LOG} & disown
} &>/dev/null
}

EXTERNAL_TERMINAL() {
[ "$USR" == "root" ] && sshpass -p "$PWD" ssh -q $VERBOSE -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o "RequestTTY force" -p $PRT $USR@$SRV  | tee -a $CLD_LOG
[ "$USR" == "root" ] || sshpass -p "$PWD" ssh -q $VERBOSE -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o "RequestTTY force" -p $PRT $USR@$SRV "sudo -i" | tee -a $CLD_LOG
}

[ "$TIMEOUT" ] || export TIMEOUT=60
EXTERNAL_DEPLOY() {
[ "$USR" == "root" ] && timeout ${TIMEOUT} sshpass -p "$PWD" ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o "RequestTTY force" -p $PRT $USR@$SRV "bash -s" 2>&1
[ "$USR" == "root" ] || timeout ${TIMEOUT} sshpass -p "$PWD" ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o "RequestTTY force" -p $PRT $USR@$SRV "sudo bash -s" 2>&1
}

[ "$TIMEOUT_NOTTY" ] || export TIMEOUT_NOTTY=60
EXTERNAL_DEPLOY_NOTTY() {
[ "$USR" == "root" ] && timeout ${TIMEOUT_NOTTY} sshpass -p "$PWD" ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "bash -s" 2>&1
[ "$USR" == "root" ] || timeout ${TIMEOUT_NOTTY} sshpass -p "$PWD" ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "sudo bash -s" 2>&1
}

EXTERNAL_UMOUNT() {
LOCALMOUNTPATH="/home/$SUDO_USER/mnt/$VM" &>/dev/null ; fusermount -uzq $LOCALMOUNTPATH &>/dev/null ; rmdir $LOCALMOUNTPATH &>/dev/null
}

user_is_admin()
{
CLD_USER=$1
[ "$CLD_USER" ] || { echo CLD_USER is not defined ; return 1 ; }
if awk -F ":" '{print $1":"$4":"$5}' /var/cld/creds/passwd | grep "^${CLD_USER}:" | cut -d : -f 2- | grep -q "^ALL:ALL$"
then
echo 0
return 0
else
echo 1
return 1
fi
}

CLOUDS_USER_ALLOWED() {
for OPTS in ${@:1}
do
echo $OPTS | grep -q  '^\--groups=' && CLD_GROUPS="$(echo $OPTS | cut -d '=' -f 2 | tr '\n' ',' | sed 's#,#$,#g' | sed 's#^\$,##g' | tr ',' '\n')"
echo $OPTS | grep -q  '^\--json' && JSONFUNCOUT=1
done

ARG1=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -1)
ARG2=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -2 | tail -1)
ARG3=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -3 | tail -1)

if [ "$JSONFUNCOUT" == "1" ]
then
  for GROUP in $(grep -v "^$\|^#" /var/cld/access/users/${SUDO_USER}/groups | grep "${CLD_GROUPS}")
  do
    CLOUDS=$(cut -d _ -f -4 /var/cld/access/groups/${GROUP}/clouds | grep -vh "^$\|^#" 2>/dev/null | grep -i "$ARG1" | grep -i "$ARG2" | grep -i "$ARG3" | head -c -1)
    if [ "$(echo -n "$CLOUDS" | wc -w)" != "0" ]
    then
      cat << EOL | tr -d '\n'
{"group": "$GROUP",
"clouds": $(echo -n "$CLOUDS" | awk 'BEGIN {print "["} {print "\x22"$1"\x22,"} END {print "]"}' | tr -d '\n' | sed 's#,]#]#g')
},
EOL
    fi
  done | head -c -1 | cat <(echo -n '[') - <(echo -n ']')
else
  for GROUP in $(grep -v "^$\|^#" /var/cld/access/users/${SUDO_USER}/groups | grep "${CLD_GROUPS}")
  do
    cut -d _ -f -4 /var/cld/access/groups/${GROUP}/clouds | grep -vh "^$\|^#" 2>/dev/null | grep -i "$ARG1" | grep -i "$ARG2" | grep -i "$ARG3"
  done
  [ "$CLD_GROUPS" ] || cut -d _ -f -4 /var/cld/access/users/${SUDO_USER}/clouds | grep -vh "^$\|^#" 2>/dev/null | grep -i "$ARG1" | grep -i "$ARG2" | grep -i "$ARG3"
fi
}

MODULES_USER_ALLOWED() {
for OPTS in ${@:1}
do
echo $OPTS | grep -q  '^\--modules=' && CLD_MODULES="$(echo $OPTS | cut -d '=' -f 2 | tr '\n' ',' | sed 's#,#/bin,#g' | tr ',' '\n')"
echo $OPTS | grep -q  '^\--json' && JSONFUNCOUT=1
done

ARG1=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -1)
ARG2=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -2 | tail -1)
ARG3=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -3 | tail -1)

CLD_TOOLS=$(grep alias /home/${SUDO_USER}/.bashrc | grep -v "^#" | cut -d "'" -f 2 | cut -d ' ' -f 3 | grep "${CLD_MODULES}" | grep -i "$ARG1" | grep -i "$ARG2" | grep -i "$ARG3")
if [ "$JSONFUNCOUT" == "1" ]
then
    for CLD_MODULE in $(rev <<< "$CLD_TOOLS" | cut -d / -f 3- | rev | sort -u | rev | cut -d / -f 1 | rev)
    do
    cat << EOL | tr -d '\n'
{"module": "$CLD_MODULE",
"tools": $(echo "$CLD_TOOLS" | grep "${CLD_MODULE}/bin/" | rev | cut -d / -f 1 | rev | awk 'BEGIN {print "["} {print "\x22"$1"\x22,"} END {print "]"}' | tr -d '\n' | sed 's#,]#]#g')
},
EOL
    done | head -c -1 | cat <(printf '[') - <(printf ']')
else
    for CLD_MODULE in $(rev <<< "$CLD_TOOLS" | cut -d / -f 3- | rev | sort -u | rev | cut -d / -f 1 | rev)
    do
    cat << EOL
${CLD_MODULE}:
$(echo "$CLD_TOOLS" | grep "${CLD_MODULE}/bin/" | rev | cut -d / -f 1 | rev)

EOL
done
fi
}

CHECK_DNS()
{
grep "$1" -qR --color=always /var/cld/modules/dns/data/*/`TZ=Europe/Moscow date +%F`/ \
&& echo "###############################################" \
&& echo "Info by matching first argument with DNS lists:" | grep --color=always "DNS" \
&& grep "$1" -R --color=always /var/cld/modules/dns/data/*/`TZ=Europe/Moscow date +%F`/ \
&& echo "###############################################" && echo
}

cldtailcut()
{
cat << CLDTAILCUT
${LINE:0:200}
${LINE:200:400}
${LINE:400:600}
CLDTAILCUT
}

cldtailfull()
{
cat << CLDTAILCUT
${LINE}
CLDTAILCUT
}

cldtaillogic()
{
[ ${#LINE} -gt 200 ] && cldtailcut || cldtailfull
}

cldtaillbegin()
{
[[ "${LINE}" =~ .*\>.*#BEGIN_DEPLOY ]] && BEGIN_DEPLOY=1 && cldtailfull
}

cldtail()
{
BEGIN_DEPLOY=$1
while IFS='' read -e LINE
do
[ "$BEGIN_DEPLOY" == "1" ] &>/dev/null && cldtailfull || cldtaillbegin
done
}

cldtail_old()
{
iln=0
while IFS='' read -e LINE
do
[ "$iln" -gt "$1" ] &>/dev/null && cldtaillogic || let iln++
done
}

echoexit0()
{
echo "${@:1}"
exit 0
}

echoexit1()
{
echo "${@:1}"
exit 1
}

INSTANCE_GROUP_FUNCS()
{
CLD_USER_GROUPS=$(cat /var/cld/access/users/${SUDO_USER}/groups | grep -v "^$\|^#" | head -c -1 | tr '\n' ',')
CLD_USER_GROUPS_COUNT=$(grep -v "^#\|^$" /var/cld/access/users/${SUDO_USER}/groups | wc -l)
[ "$CLD_USER_GROUPS_COUNT" -eq 1 ] && export GROUP=$(source <(echo grep -l "${VM}" /var/cld/access/groups/${CLD_USER_GROUPS}/clouds) | cut -d '/' -f 6 | tail -1)
[ "$CLD_USER_GROUPS_COUNT" -gt 1 ] && export GROUP=$(source <(echo grep -l "${VM}" /var/cld/access/groups/\{${CLD_USER_GROUPS}\}/clouds) | cut -d '/' -f 6 | tail -1)
[ "$GROUP" ] || export GROUP=$(grep -l $VM /var/cld/access/groups/*/clouds | cut -d '/' -f 6 | tail -1)
if [ "$GROUP" = "" ] ; then
sleep 0.5s
[ "$CLD_USER_GROUPS_COUNT" -eq 1 ] && export GROUP=$(source <(echo grep -l "${VM}" /var/cld/access/groups/${CLD_USER_GROUPS}/clouds) | cut -d '/' -f 6 | tail -1)
[ "$CLD_USER_GROUPS_COUNT" -gt 1 ] && export GROUP=$(source <(echo grep -l "${VM}" /var/cld/access/groups/\{${CLD_USER_GROUPS}\}/clouds) | cut -d '/' -f 6 | tail -1)
[ "$GROUP" ] || export GROUP=$(grep -l $VM /var/cld/access/groups/*/clouds | cut -d '/' -f 6 | tail -1)
fi
if [ "$GROUP" = "" ] ; then echo "choosen CLOUD ${VM} have incorrect GROUP" ; exit 1 ; fi
if grep -qs "1" /var/cld/access/groups/${GROUP}/funcs
then
source <(for LOOP_FUNC in funcvars_VARS functerm_TERMINAL funcmount_MOUNT funcumount_UMOUNT funcdeploy_DEPLOY funcdeploynotty_DEPLOY_NOTTY
    do
      GROUPFUNC=$(cut -d _ -f 1 <<< ${LOOP_FUNC})
      NAMEFUNC=$(cut -d _ -f 2- <<< ${LOOP_FUNC})
      echo "${GROUP}_${GROUPFUNC}(){"
      [ -f /var/cld/access/groups/${GROUP}/${GROUPFUNC} ] && cat /var/cld/access/groups/${GROUP}/${GROUPFUNC} || declare -f EXTERNAL_${NAMEFUNC} | tail -n +3 | head -n -1
      echo '}'
    done)
  CLD_VARS=${GROUP}_funcvars
  CLD_MOUNT=${GROUP}_funcmount
  CLD_TERMINAL=${GROUP}_functerm
  CLD_UMOUNT=${GROUP}_funcumount
  CLD_DEPLOY=${GROUP}_funcdeploy
  CLD_DEPLOY_NOTTY=${GROUP}_funcdeploynotty
else
  CLD_VARS=EXTERNAL_VARS
  CLD_MOUNT=EXTERNAL_MOUNT
  CLD_TERMINAL=EXTERNAL_TERMINAL
  CLD_UMOUNT=EXTERNAL_UMOUNT
  CLD_DEPLOY=EXTERNAL_DEPLOY
  CLD_DEPLOY_NOTTY=EXTERNAL_DEPLOY_NOTTY
fi
}

CUSTOM_FUNCS_ACTIVATE(){
source  <(for GROUPFUNC in funcvars functerm funcmount funcumount 
    do
      echo "${GROUP}_${GROUPFUNC}(){"
      cat /var/cld/access/groups/${GROUP}/${GROUPFUNC}
      echo '}'
    done)
  alias EXTERNAL_VARS=${GROUP}_funcvars
  alias EXTERNAL_MOUNT=${GROUP}_funcmount
  alias EXTERNAL_TERMINAL=${GROUP}_functerm
  alias EXTERNAL_UMOUNT=${GROUP}_funcumount
  echo CUSTOM_FUNCS_ACTIVATE
}

init-load-constants()
{
for CONSTANT_SET in ${@:1}
do
CONSTANT=$(cut -d '|' -f 1 <<< ${CONSTANT_SET})
EXAMPLE=$(grep '|' <<< ${CONSTANT_SET} | cut -d '|' -f 2)
CREDSFILE=$(egrep ".*|.*|.*" <<< ${CONSTANT_SET} | cut -d '|' -f 3)
[ "$CREDSFILE" ] || export CREDSFILE=/var/cld/creds/creds
source <(grep "${CONSTANT}=" ${CREDSFILE})
if ! [ "${!CONSTANT}" ]
then
  while ! [[ "$VALUE" =~  ^[A-Za-z0-9/:.@%_,\ -]+$ ]]
do
echo -e "Please enter the VALUE for ${CONSTANT} constant using [A-Za-z0-9/:._ -] - symbols\nEXAMPLE: ${EXAMPLE}"
echo -n "#: " ; read VALUE
echo
done
sed -i '/'${CONSTANT}'/d' ${CREDSFILE}
echo "${CONSTANT}=\"${VALUE}\"" >> ${CREDSFILE}
source <(echo "${CONSTANT}=\"${VALUE}\"")
unset VALUE
fi
done
}

init-string()
{
cldcolorenv
ARGS_NUM="$(echo "${@:1}" | tr ' ' '\n' | grep -v "^--" | wc -w)"
for ARG in $(seq 1 ${ARGS_NUM})
do
source <(echo ARG${ARG}=\"$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -${ARG} | tail -1)\")
ARGS=$(cat << EOL
${ARGS}
ARG${ARG}
EOL
)
done

for OPTS in $(echo "${@:1}" | tr ' ' '\n' | grep '^\--')
do
echo $OPTS | grep -q  '^\--file=' && FILE="$(echo $OPTS | cut -d '=' -f 2)"
echo $OPTS | grep -q  '^\--separator=' && DELIM="$(echo $OPTS | cut -d '=' -f 2)"
done
[ "$DELIM" ] || DELIM=_

for CONSTANT_SET in ${ARGS}
do
CONSTANT_SET=${!CONSTANT_SET}
CONSTANT=$(cut -d '|' -f 1 <<< "${CONSTANT_SET}")
EXAMPLE=$(cut -d '|' -f 2 <<< "${CONSTANT_SET}")
REGEX=$(cut -d '|' -f 3 <<< "${CONSTANT_SET}")
if ! [ "${!CONSTANT}" ]
then
  while ! egrep -q "^${REGEX}$" <<< "$VALUE"
do
echo -e "Please enter the VALUE for ${BoldUline}${CONSTANT}${OffColor} variable using "${REGEX}" - symbols\nEXAMPLE: ${EXAMPLE}"
echo -n "#: " ; read VALUE
echo
done
source <(echo "CLOUD=\"${CLOUD}${VALUE}${DELIM}\"")
unset VALUE
fi
done
echo "${CLOUD::-1} written to file ${FILE}"
echo "${CLOUD::-1}" >> ${FILE}
}

passwordgen()
{
cat /dev/urandom | tr -dc abcdefjhgkmnopqrstuvwxyzABCDEFJHGKLMNPQRSTUVWXYZ1234567890 | head -c${1:-25}
}

cldhelp()
{
[ "$HELPYAML" = "1" ] && export YAMLCORRECTOR=' |'
(
source <(grep CLD_DOMAIN /var/cld/creds/creds)
[ "$HELP_ONLY" ] || HELP_ONLY="CLI BOT API WEB"
# grep "CLI" <<< $HELP_ONLY | grep -q "WEB" || HELP_ONLY="${HELP_ONLY} WEB"
[ "$HELP_DESC" ] && (echo Description:${YAMLCORRECTOR}
echo "${HELP_DESC}" | awk '{print "     "$0}'
echo)
(echo Arguments:${YAMLCORRECTOR}
[ "$HELP_ARGS" ] && awk '{print "     "$0}' <<< "${HELP_ARGS}"
awk '{print "     "$0}' <<< "-h --help                Print this information"
awk '{print "     "$0}' <<< "-v --version             Print tool version"
echo)
[ "$HELP_EXAMPLES" ] && (
echo Usage examples:
for METHOD in $HELP_ONLY
do
[ "${METHOD}" ] && echo "  ${METHOD}:${YAMLCORRECTOR}"
(IFS=$'\n'
for STRING in ${HELP_EXAMPLES}
do
ONLYPATTERN=$(grep '#' <<< $STRING | cut -d '#' -f 2 | tr ',' '\n')
if [ "${METHOD}" == "CLI" ]
then
[ "$ONLYPATTERN" ] && grep -q "$ONLYPATTERN" <<< "CLI" && cut -d '#' -f 1 <<< $STRING | awk '{print "     "$0}'
[ "$ONLYPATTERN" ] || awk '{print "     "$0}' <<< $STRING
elif [ "${METHOD}" == "BOT" ]
then
[ "$ONLYPATTERN" ] && grep -q "$ONLYPATTERN" <<< "BOT" && cut -d '#' -f 1 <<< /${STRING//cld-/} | awk '{print "     "$0}'
[ "$ONLYPATTERN" ] || awk '{print "     "$0}' <<< /${STRING//cld-/}
elif [ "${METHOD}" == "API" ]
then
[ "$ONLYPATTERN" ] && grep -q "$ONLYPATTERN" <<< "API" && cut -d '#' -f 1 <<< \""https://$([ "$CLD_DOMAIN" ] && echo $CLD_DOMAIN || echo cld.example.com)/api/$(awk -F " " '{print $1}' <<< ${STRING//cld-/})?token=y0urUserT0keN&args=$(awk -F " " '{$1=""; print $0}' <<< ${STRING} | cut -b 2-)"\" | sed 's# #%20#g' | awk '{print "     curl -s "$0}'
[ "$ONLYPATTERN" ] || awk '{print "     curl -s "$0}' <<< \""https://$([ "$CLD_DOMAIN" ] && echo $CLD_DOMAIN || echo cld.example.com)/api/$(awk -F " " '{print $1}' <<< ${STRING//cld-/})?token=y0urUserT0keN&args=$(awk -F " " '{$1=""; print $0}' <<< ${STRING} | cut -b 2- | sed 's# #%20#g')"\" | sed 's#&args="$#"#g'
elif [ "${METHOD}" == "WEB" ]
then
[ "$ONLYPATTERN" ] && grep -q "$ONLYPATTERN" <<< "WEB" && cut -d '#' -f 1 <<< "https://$([ "$CLD_DOMAIN" ] && echo $CLD_DOMAIN || echo cld.example.com)/tool/$(awk -F " " '{print $1}' <<< ${STRING})/$(awk -F " " '{$1=""; print $0}' <<< ${STRING} | cut -b 2-)" | awk '{print "     "$0}'
[ "$ONLYPATTERN" ] || awk '{print "     "$0}' <<< "https://$([ "$CLD_DOMAIN" ] && echo $CLD_DOMAIN || echo cld.example.com)/tool/$(awk -F " " '{print $1}' <<< ${STRING})/$(awk -F " " '{$1=""; print $0}' <<< ${STRING} | cut -b 2-)"
fi
done)
echo
done
)
) | awk -v f="$F" -v b="$B" '{print f$0f}'
exit 0
}

version()
{
TOOL="${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}"
cd /var/cld && \
GIT_DATA=$(git log -1 --date=format:'%F' ${TOOL})
if [ "${GIT_DATA}" ]
then
COPYRIGHT="(C) Aleksandr Chendev
Released under the GNU General Public License v2.0."
else
GIT_DATA=$(md5sum ${TOOL} | cut -d ' ' -f 1 | head -c 12)
fi
cat << EOL
$(basename ${TOOL}) - $(echo "${GIT_DATA}" | head -1 | cut -d ' ' -f 2 | head -c 7) - $(echo "${GIT_DATA}" | head -3 | tail -1 | tr -s ' ' | cut -d ' ' -f 2) ${COPYRIGHT}

EOL
exit 0
}

cldcolorenv()
{
OffColor='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

WhiteOnBlue='\e[48;5;19m'
BoldUline='\e[1;4m'
}

for OPTS in ${@:1}
do
[[ "$OPTS" =~ ^(-h|--help)$ ]] && cldhelp
[[ "$OPTS" =~ ^(-v|--version)$ ]] && version
done