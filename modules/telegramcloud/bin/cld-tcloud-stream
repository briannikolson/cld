#!/bin/bash
HELP_DESC=$(cat << 'EOL'
Stream any output to telegram chat
EOL
)
HELP_ARGS=$(cat << 'EOL'
--chatid=-1234567891011|123456789      Telegram chat or user id
--noansi                               Remove all ansi colors and sequence escapes tags
EOL
)
HELP_EXAMPLES=$(cat << 'EOL'
tail -f /var/log/access.log | cld-tcloud-stream --chatid=-1234567891011
cld | cld-tcloud-stream --chatid=-1234567891011 --noansi
EOL
)
HELP_ONLY="CLI"

source /var/cld/bin/include/cldfuncs
init-load-constants TELEGRAM_BOT_TOKEN\|1234567890:AAEzBFqFii-uirfyG3PnygA0DAvJvRH7UzB CLD_DOMAIN\|cld.example.com

for OPTS in ${@:1}
do
echo $OPTS | grep -q  '^\--chatid=' && TG_GROUP="$(echo $OPTS | cut -d '=' -f 2)"
echo $OPTS | grep -q  '^\--noansi' && ANSIFILTER=1
done
[ "$TG_GROUP" ] || echoexit1 Telegram user or chat id is not defined - use --help argument for details



export COMMAND_ID=$(cat /dev/urandom | tr -dc abcdefjhgkmnopqrstuvwxyzABCDEFJHGKLMNPQRSTUVWXYZ1234567890 | head -c 7)
export TG_STREAM_FILE=/var/cld/tmp/tgstream_cmd_${COMMAND_ID}
touch ${TG_STREAM_FILE}

sendmessage() {
curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
-d "chat_id=${TG_GROUP}&parse_mode=markdown&text=\`\`\`%0A$(urlencode "$1")\`\`\`"
}

sendmessageoffset() {
local OFFSET=$1
local MESSAGE_TEXT=$(tail -n +${OFFSET} ${TG_STREAM_FILE})
curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
-d "chat_id=${TG_GROUP}&parse_mode=markdown&text=\`\`\`%0A$(urlencode "${MESSAGE_TEXT}")\`\`\`"
}

editmessage() {
local OFFSET=$1
local MESSAGE_TEXT=$(tail -n +${OFFSET} ${TG_STREAM_FILE})
curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText" \
-d "chat_id=${TG_GROUP}&message_id=${TG_MESSAGE_ID}&parse_mode=markdown&text=\`\`\`%0A$(urlencode "${MESSAGE_TEXT}")\`\`\`" | grep false 1>&2
}

TG_MESSAGE_ID=$(sendmessage initializing | jq .result.message_id)

{
TG_STREAM_FILE_SIZE_PREV=0
TG_FILE_LINE_COUNT_PREV=0
TG_STREAM_FILE_SIZE=$(du -b ${TG_STREAM_FILE} | cut -f1)
TG_FILE_OFFSET_STEP=3600
TG_FILE_OFFSET=${TG_FILE_OFFSET_STEP}
TG_FILE_LINE_OFFSET=1
while :;
do
  TG_STREAM_FILE_SIZE=$(du -b ${TG_STREAM_FILE} | cut -f1)
  TG_FILE_LINE_COUNT=$(wc -l ${TG_STREAM_FILE} | cut -d ' ' -f 1)
  if [ "${TG_STREAM_FILE_SIZE}" != "${TG_STREAM_FILE_SIZE_PREV}" ]
  then
    if [ "${TG_STREAM_FILE_SIZE}" -ge "${TG_FILE_OFFSET}" ]
      then
        editmessage ${TG_FILE_LINE_OFFSET}
        TG_FILE_LINE_COUNT_PREV_SENT=$(expr ${TG_FILE_LINE_COUNT} + 1)
        TG_FILE_OFFSET=$(expr $TG_FILE_OFFSET + $TG_FILE_OFFSET_STEP)
        TG_MESSAGE_BODY=$(sendmessageoffset ${TG_FILE_LINE_COUNT_PREV_SENT})
        echo "$TG_MESSAGE_BODY" | grep false 1>&2 
        TG_MESSAGE_ID=$(echo "$TG_MESSAGE_BODY" | jq .result.message_id)
        TG_FILE_LINE_OFFSET=${TG_FILE_LINE_COUNT_PREV_SENT}
    else
        editmessage ${TG_FILE_LINE_OFFSET}
        TG_FILE_LINE_COUNT_PREV_SENT=$(expr ${TG_FILE_LINE_COUNT} + 1)
    fi
    sleep 1.9s
  fi
  sleep 0.1s
  TG_STREAM_FILE_SIZE_PREV=${TG_STREAM_FILE_SIZE}
  if [ -f "/var/cld/tmp/tgstream_cmd_${COMMAND_ID}_done" ]
  then
    TG_STREAM_FILE_SIZE=$(du -b ${TG_STREAM_FILE} | cut -f1)
    [ "${TG_STREAM_FILE_SIZE}" != "${TG_STREAM_FILE_SIZE_PREV}" ] && editmessage ${TG_FILE_LINE_OFFSET}
    break
  fi
done
} &

if [ "$ANSIFILTER" ]
then
ANSIFILTER_PREFIX=".ansi"
touch ${TG_STREAM_FILE}${ANSIFILTER_PREFIX}
{
while :;
do
ansifilter -i ${TG_STREAM_FILE}${ANSIFILTER_PREFIX} -o ${TG_STREAM_FILE}.tmp && { mv -f ${TG_STREAM_FILE}.tmp ${TG_STREAM_FILE} ; }
[ -f "/var/cld/tmp/tgstream_cmd_${COMMAND_ID}_done" ] && break
sleep 0.1s
done
} &
fi

while IFS= read line; do
echo "${line}" | tee -a ${TG_STREAM_FILE}${ANSIFILTER_PREFIX}
done
touch /var/cld/tmp/tgstream_cmd_${COMMAND_ID}_done
wait