#!/bin/bash
HELP_DESC=$(cat << 'EOL'
Quick create web monitoring instance at Zabbix
EOL
)
HELP_ARGS=$(cat << 'EOL'
$1                       FQDN
--pattern=Copyright      Key word on the page - blank - will check only by 200 status
--url=https://li.nk/adr  URL address for check - default is /
EOL
)
HELP_EXAMPLES=$(cat << 'EOL'
cld-webcheckadd example.com
cld-webcheckadd example.com -url=https://example.com/some/page/addr -pattern=Copyright
EOL
)
source /var/cld/bin/include/cldfuncs
ARG1=$(echo "${@:1}" | tr ' ' '\n' | grep -v '^\-' | head -1)
ARG2=$(echo "${@:1}" | tr ' ' '\n' | grep -v '^\-' | head -2 | tail -1)
ARG3=$(echo "${@:1}" | tr ' ' '\n' | grep -v '^\-' | head -3 | tail -1)

for OPTS in ${@:1}
do
echo $OPTS | grep -q  '^\--pattern=\|^\-pattern=' && PATTERN="$(echo $OPTS | cut -d '=' -f 2)"
echo $OPTS | grep -q  '^\--url\|^\-url' && URL="$(echo $OPTS | cut -d '=' -f 2)"
done

IP=127.0.0.1
HOST_NAME="check $ARG1"
HOST_DNS="$ARG1"
[ "$URL" ] || URL="https://$ARG1"
# CONSTANT VARIABLES
ERROR='0'

init-load-constants ZABBIX_USER\|zabbix ZABBIX_PASS\|pAs5w0Rd ZABBIX_SERVER\|zbx.example.com ZABBIX_API\|https://zbx.example.com/api_jsonrpc.php HOSTGROUPID\|10 TEMPLATEIDS\|10362,10364,10365

export TEMPLATEIDS="$(tr ',' '\n' <<< ${TEMPLATEIDS})"
# Authenticate with Zabbix API
authenticate() {
echo $(curl -k -s -H 'Content-Type: application/json-rpc' -d "{
  \"jsonrpc\": \"2.0\",
  \"method\": \"user.login\",
  \"params\": {
    \"user\": \"${ZABBIX_USER}\",
    \"password\": \"${ZABBIX_PASS}\"
  },
  \"auth\": null,
  \"id\": 0
}" "$API" | cut -d ':' -f 3 | cut -d ',' -f 1) | tr -d '"'
}

AUTH_TOKEN=$(authenticate)

JSON_REQUEST=$(cat << EOL | jq .
{
        "jsonrpc": "2.0",
        "method": "host.create",
        "params": {
                "host": "${HOST_NAME}",
                "interfaces": [{
                        "type": 1,
                        "main": 1,
                        "useip": 1,
                        "ip": "${IP}",
                        "dns": "${HOST_DNS}",
                        "port": "10050"
                }],
                "groups": [{
                        "groupid": "${HOSTGROUPID}"
                }],
    "macros": [{
            "macro": "{\$URL}",
            "value": "${URL}"
    },
    {
            "macro": "{\$PATTERN}",
            "value": "${PATTERN}"
    }],
                "templates": [
$(i=1
TEMPLATEIDS_ROWS=$(echo "$TEMPLATEIDS" | wc -l)
for TEMPLATEID in $TEMPLATEIDS
do
[ "$TEMPLATEIDS_ROWS" -eq "1" ] && echo {\"templateid\": \"${TEMPLATEID}\"} && break
[ "$TEMPLATEIDS_ROWS" -gt "1" -a "$TEMPLATEIDS_ROWS" -eq "$i" ] && echo {\"templateid\": \"${TEMPLATEID}\"} || echo {\"templateid\": \"${TEMPLATEID}\"},
let i++
done)
    ]
        },
        "auth": "${AUTH_TOKEN}",
        "id": 1
}
EOL
)

RESULT=$(curl -k -s -H 'Content-Type: application/json-rpc' -d "${JSON_REQUEST}" "$API" | jq .)
(
echo "$RESULT" | grep -q result && echo Web checker for $ARG1 configured successfully || echo "$RESULT" | grep "data" | cut -d : -f 2- | cut -d ' ' -f 2- | tr -d '"''\\'
) #| awk -v f="$F" -v b="$B" '{print f$0f}'